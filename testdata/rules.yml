# nonk8s
# CEL (Common Expression Language) Rulesets Configuration
# This file demonstrates various ways to combine and organize CEL rules

apiVersion: v1
kind: RulesetConfig
metadata:
  name: cel-rulesets-example
  description: "Examples of CEL rule combinations and patterns"

# Individual rule definitions
rules:
  # Basic validation rules
  age_validation:
    name: "Age Validation"
    description: "Validates user age requirements"
    expression: "user.age >= globals.min_age"

  email_format:
    name: "Email Format Check"
    description: "Validates email format using regex"
    expression: |
      user.email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")
  # Business logic rules
  business_hours:
    name: "Business Hours Check"
    description: "Validates if current time is within business hours"
    expression: |
      timestamp(request.time).getHours() >= globals.business_hours_start && 
      timestamp(request.time).getHours() < globals.business_hours_end

  rate_limiting:
    name: "Rate Limiting"
    description: "Checks request rate limits"
    expression: "request.attempt <= globals.max_retries"

  user_status:
    name: "User Status Check"
    description: "Validates user account status"
    expression: "user.status == 'active' && !user.suspended"

  user_tier:
    name: "User Tier Check"
    description: "Validates user account tier"
    expression: "user.tier == 'premium' || user.tier == 'enterprise'"

# Rule combinations and sets
rulesets:
  # Simple AND combination - all rules must pass
  user_registration:
    name: "User Registration Validation"
    description: "All rules must pass for successful registration"
    combination_type: "AND"
    rules:
      - age_validation
      - email_format
      - user_status
  # Simple OR combination - at least one rule must pass
  request_throttling:
    name: "Request Throttling Check"
    description: "At least one rule must pass to allow request"
    combination_type: "OR"
    rules:
      - rate_limiting
      - user_tier

# Rule execution policies
execution_policies:
  fail_fast:
    name: "Fail Fast Execution"
    description: "Stop execution on first rule failure"
    stop_on_failure: true
    max_execution_time: "1ns"

  collect_all:
    name: "Collect All Results"
    description: "Execute all rules regardless of failures"
    stop_on_failure: false

# Error handling and logging
error_handling:
  execution_policy: "collect_all"
  custom_error_messages:
    age_validation: "user must be at least 18 years old"
    email_format: "please provide a valid email address"
    domain_whitelist: "email domain is not allowed"
    business_hours: "service only available during business hours (9 AM - 5 PM)"
    request_throttling: "too many requests, please try again later"

globals:
  min_age: 13 # Lower age requirement for testing
  max_retries: 5

# Environment-specific overrides
environments:
  development:
    globals:
      min_age: 13 # Lower age requirement for testing

  production:
    globals:
      min_age: 18
    error_handling:
      execution_policy: "fail_fast"
